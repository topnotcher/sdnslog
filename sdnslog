#!/usr/bin/env python
import socket,os, pwd, grp, datetime, argparse, select, MySQLdb, daemon, yaml, sys


def ip2n(ip):
    octets = ip.split('.')
    return sum([(int(octets[x]))<<(24-(8*x)) for x in range(0,4)])

class MySQLQueryLogger(object):
    def __init__(self, db, host, user, passwd):
        self.tbl = 'queries'
        self.dbconfig = {'host': host, 'passwd': passwd, 'user': user, 'passwd': passwd, 'db': db}
        self.db = None

    def lazy_connect(self):
        if self.db is None:
            self.db = MySQLdb.connect(**self.dbconfig)

    def log_query(self,query):
        self.lazy_connect()

        values = {
                'src': ip2n(query['src']),
                'dst': ip2n(query['dst']),
                'name': query['name'],
                'type': query['type'],
                'last_time': query['time'],
                'hits' : 1
        }

        fields_str = ','.join(["`%s`" % (key) for key in values.keys()])
        values_str = ','.join(["'%s'" % (self.db.escape_string(str(value))) for value in values.values()])
        query = "INSERT INTO `%s` (%s) VALUES (%s) ON DUPLICATE KEY UPDATE \
                `last_time` = VALUES(`last_time`), \
                `hits` = `hits` + 1;" % (self.tbl, fields_str, values_str)
        self.db.cursor().execute(query)
        self.db.commit()

def get_uid(user):
    return pwd.getpwnam(user).pw_uid

def get_gid(group):
    return grp.getgrnam(group).gr_gid

def drop_privileges(user,group):
    uid = get_uid(user)
    gid = get_gid(group)

    os.setgroups([])
    os.setgid(gid)
    os.setuid(uid)

def init_sockets(sock_paths, user, group):
    socks = []

    for path in sock_paths:
        if os.path.exists(path):
            os.remove(path)

        sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
        sock.bind(path)

        os.chmod(path, 0700)

        socks.append(sock)

    return socks


def parse_query_log(log_fields):
    query = {}
    query['time'] = datetime.datetime.strptime(log_fields[0], '%m/%d/%Y-%H:%M:%S.%f').strftime('%Y-%m-%d %H:%M:%S')
    query['name'] = log_fields[2]
    query['type'] = log_fields[3]
    src,dst = [x.strip() for x in log_fields[4].split('->', 1)]
    query['src'], src_port = src.split(':',2)
    query['dst'], dst_port = dst.split(':',2)

    return query

def read_socket(sock, logger):
    dgm = sock.recv(1024)

    if not dgm:
        return;

    log = [x.strip() for x in dgm.strip().split('[**]')]
    
    if not log[1].startswith('Query TX'): 
        return
    
    query = parse_query_log(log)

    logger.log_query(query)

def monitor_sockets(config):
    socks = init_sockets(config['sockets'], config['user'], config['group'])

    logger = MySQLQueryLogger(config['mysql']['db'], config['mysql']['host'], \
            config['mysql']['user'], config['mysql']['pass'])

    while True:
        rd,wr,err = select.select(socks, [], [])
        
        for sock in rd:
            read_socket(sock, logger)

def get_args():
    parser = argparse.ArgumentParser(description='Parse suricata DNS logs from \
            a unix socket and log queries to a MySQL database.')
    parser.add_argument('-c', '--config', help='path to configuration file', required=True)
    parser.add_argument('-s', '--socket', nargs='+', help='a unix dgram socket to monitor', default=[])
    parser.add_argument('-d', '--daemon', action='store_true', default=False, help='daemonize')
    parser.add_argument('-u', '--user', help='user to drop to after creating the socket')
    parser.add_argument('-g', '--group', help='group to drop to after creating the socket')

    return parser.parse_args()

def read_config_file(path):
    if not os.path.exists(path):
        raise ValueError("Config file '%s' does not exist." % (path))

    config = yaml.load(open(path))

    if 'mysql' not in config:
        return 'config missing mysql configuration'

    for value in ('db','user','pass','host'):
        if value not in config['mysql']:
            raise ValueError('missing mysql %s' % (value))

    return config

def merge_options(args, config):
    config['user'] = args.user
    config['group'] = args.group
    config['daemon'] = args.daemon
    
    sock_paths = args.socket

    if 'sockets' in config:
        for path in config['sockets']:
            if path not in sock_paths:
                sock_paths.append(path)

    if len(sock_paths) == 0:
        raise ValueError('no sockets to read from')

    config['sockets'] = sock_paths

    return config

def main():
    args = get_args()
    config = merge_options(args, read_config_file(args.config))

    if config['daemon']:
        context = daemon.DaemonContext(uid=get_uid(config['user']), \
                gid=get_gid(config['group']))

        with context: 
            monitor_sockets(config)
    else:
        drop_privileges(config['user'], config['group'])
        monitor_sockets(config)

if __name__ == '__main__':
    main()
